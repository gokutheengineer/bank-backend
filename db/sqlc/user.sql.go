// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  fullname,
  password_hashed,
  email
) VALUES (
  $1, $2, $3, $4
) RETURNING username, fullname, email, password_hashed, created_at, password_updated_at
`

type CreateUserParams struct {
	Username       string `json:"username"`
	Fullname       string `json:"fullname"`
	PasswordHashed string `json:"password_hashed"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Fullname,
		arg.PasswordHashed,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, fullname, email, password_hashed, created_at, password_updated_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  password_hashed = COALESCE($1, password_hashed),
  password_updated_at = COALESCE($2, password_updated_at),
  email = COALESCE($3, email),
  fullname = COALESCE($4, fullname)
WHERE
  username = $5
RETURNING username, fullname, email, password_hashed, created_at, password_updated_at
`

type UpdateUserParams struct {
	PasswordHashed    pgtype.Text        `json:"password_hashed"`
	PasswordUpdatedAt pgtype.Timestamptz `json:"password_updated_at"`
	Email             pgtype.Text        `json:"email"`
	Fullname          pgtype.Text        `json:"fullname"`
	Username          string             `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.PasswordHashed,
		arg.PasswordUpdatedAt,
		arg.Email,
		arg.Fullname,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Fullname,
		&i.Email,
		&i.PasswordHashed,
		&i.CreatedAt,
		&i.PasswordUpdatedAt,
	)
	return i, err
}
